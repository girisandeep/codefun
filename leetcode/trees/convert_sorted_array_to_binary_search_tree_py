'''
Convert Sorted Array to Binary Search Tree
Solution
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 '''

 # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def mysortedArrayToBST(self, nums, low, high):
        print("low: high", low, high)
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        L = (high-low)+1
        if L <= 0:
            return None
        
        mid = low+L//2
        root = TreeNode(nums[mid])
        if L > 1:
            root.left = self.mysortedArrayToBST(nums, low, mid-1)
            root.right = self.mysortedArrayToBST(nums, mid+1, high)
        return root
    
    def sortedArrayToBST(self, nums):
        return self.mysortedArrayToBST(nums, 0, len(nums)-1)
