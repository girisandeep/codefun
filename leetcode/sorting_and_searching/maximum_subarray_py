'''
Maximum Subarray
Solution
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
'''

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0:
            0
        max_profit = nums[0]
        profit_since_last_max = max_profit
        for e in nums[1:]:
            profit_since_last_max += e
            if e > profit_since_last_max:
                if e > max_profit:
                    max_profit = e
                profit_since_last_max = e
            if profit_since_last_max > max_profit:
                max_profit = profit_since_last_max
        return max_profit
